version: '3'

services:
  api:
    build: ../python-api
    networks:
    - main
    environment:
      DB_HOST: db
      HONEYCOMB_WRITEKEY: 
    restart: on-failure

  db:
    image: mysql
    networks:
    - main
    volumes:
    - example-python-api:/var/lib
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: "example-python-api"

  reverse_proxy:
    build: .
    ports:
    - "80:80"
    networks:
    - main
    volumes:
    # Nginx conf normally wouldn't be a volume, but used here to share the file
    # between containers.  In Kubernetes you would probably use a ConfigMap for
    # this.
    - nginx-conf:/etc/nginx
    - honeytail-logs:/var/log/honeytail
    restart: on-failure

  honeytail:
    build: ../honeytail-dockerd
    volumes:
    - nginx-conf:/etc/nginx
    - honeytail-logs:/var/log/honeytail
    - honeytail-tmp:/tmp # Used to maintain state of what's already been processed
    command: --debug --parser=nginx --dataset=examples.honeytail-nginx --writekey=$HONEYCOMB_WRITEKEY --nginx.conf=/etc/nginx/nginx.conf --nginx.format=honeytail --file=/var/log/honeytail/access.log
    environment:
      HONEYCOMB_WRITEKEY:
    restart: always

volumes:
  example-python-api:
  nginx-conf:
  honeytail-logs:
  honeytail-tmp:

networks:
  main:
    driver: bridge
