version: '3'

services:
  api:
    build: ../python-api
    networks:
    - main
    environment:
      DB_HOST: db
      HONEYCOMB_WRITEKEY: 
    depends_on:
    - "db"
    restart: on-failure

  db:
    image: mysql
    networks:
    - main
    volumes:
    - example-python-api:/var/lib
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: "example-python-api"

  reverse_proxy:
    image: haproxy:alpine
    ports:
    - "80:80"
    networks:
    - main
    volumes:
    - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
    - "api"
    - "rsyslog"
    
  rsyslog:
    build:
      context: .
      dockerfile: rsyslog.Dockerfile
    ports:
    - "10514:10514/udp"
    networks:
    - main
    volumes:
    - ./rsyslog.conf:/config/rsyslog.conf
    - honeytail-logs:/var/log/honeytail
    environment:
      RSYSLOG_CONF: "/config/rsyslog.conf"

  honeytail:
    build: ../honeytail-dockerd
    volumes:
    - ./hny-haproxy.conf:/etc/hny-conf/hny-haproxy.conf
    - honeytail-logs:/var/log/honeytail
    - honeytail-tmp:/tmp # Used to maintain state of what's already been processed
    command: --debug --parser=nginx --dataset=examples.honeytail-haproxy --writekey=$HONEYCOMB_WRITEKEY --nginx.conf=/etc/hny-conf/hny-haproxy.conf --nginx.format=haproxy --file=/var/log/honeytail/access.log
    environment:
      HONEYCOMB_WRITEKEY:
    depends_on:
    - "reverse_proxy"
    restart: on-failure

volumes:
  example-python-api:
  honeytail-logs:
  honeytail-tmp:

networks:
  main:
    driver: bridge
